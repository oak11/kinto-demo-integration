"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserIDHash = getUserIDHash;
exports.registerUserURL = registerUserURL;
exports.retrieveUserURL = retrieveUserURL;

var _md = require("md5");

var _md2 = _interopRequireDefault(_md);

var _uuid = require("uuid");

var _uuid2 = _interopRequireDefault(_uuid);

require("isomorphic-fetch");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseHexString(str) {
  var result = [];
  while (str.length >= 2) {
    result.push(parseInt(str.substring(0, 2), 16));
    str = str.substring(2, str.length);
  }
  return result;
}

function getUserIDHash(userID) {
  var hash = (0, _md2.default)(userID);
  var input = parseHexString(hash);
  return _uuid2.default.v4({ random: input });
};

function registerUserURL(userID, centralRepositoryURL, headers, userStorageURL, localStorage) {

  var user_record_id = getUserIDHash(userID);
  var key = 'kinto:server-url:' + userID;

  var url = centralRepositoryURL + user_record_id;
  var body = JSON.stringify({
    data: {
      url: userStorageURL
    }
  });

  if (!headers.hasOwnProperty("Authorization")) {
    return Promise.reject(new Error("Missing Authorization header."));
  }

  return fetch(url, {
    method: 'put',
    headers: headers,
    body: body
  }).then(function (response) {

    if (response.status >= 200 && response.status < 300) {
      localStorage.setItem(key, userStorageURL);
      return userStorageURL;
    }

    if (response.status == 401) {
      throw new Error("Invalid Authentication headers.");
    }

    if (response.status >= 500) {
      throw new Error("Server not available.");
    }

    throw new Error("Central repository not correctly configured.");
  });
};

function retrieveUserURL(userID, centralRepositoryURL, headers, defaultServer, localStorage) {
  if (!defaultServer) {
    return Promise.reject(new Error("defaultServer should be defined."));
  }

  if (!headers.hasOwnProperty("Authorization")) {
    return Promise.reject(new Error("Missing Authorization header."));
  }

  var user_record_id = getUserIDHash(userID);
  var key = 'kinto:server-url:' + userID;
  var cachedURL = localStorage.getItem(key);

  if (cachedURL != null) {
    return Promise.resolve(cachedURL);
  }

  var url = centralRepositoryURL + user_record_id;

  return fetch(url, { headers: headers }).then(function (response) {
    if (response.status >= 200 && response.status < 300) {
      return response.json();
    }
    if (response.status == 404 || response.status == 403) {
      return { data: { url: defaultServer } };
    }
    if (response.status == 401) {
      throw new Error("Invalid Authentication headers.");
    }
    if (response.status >= 500) {
      throw new Error("Server is not available.");
    }
    throw new Error("Central repository not correctly configured.");
  }).then(function (data) {
    localStorage.setItem(key, data.data.url);
    return data.data.url;
  });
};